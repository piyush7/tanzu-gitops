apiVersion: v1
kind: ServiceAccount
metadata:
  name: extensions-deploy-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: package-install-admin-role
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: extensions-deploy-crb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: package-install-admin-role
subjects:
- kind: ServiceAccount
  name: extensions-deploy-sa
  namespace: default
---
apiVersion: v1
data:
  values.yaml: 
kind: Secret
metadata:
  creationTimestamp: null
  name: extensions-values
---
#apiVersion: kappctrl.k14s.io/v1alpha1
#kind: App
#metadata:
#  name: contour
#  namespace: default
#spec:
#  serviceAccountName: extensions-deploy-sa
#  deploy:
#  - kapp:
#      rawOptions:
#      - --wait-timeout=5m
#      - --kube-api-qps=20
#      - --kube-api-burst=30
#  fetch:
#  - git:
#      url: https://github.com/gorkemozlu/tanzu-gitops
#      ref: origin/master
#      subPath: apps/cluster-based/kapp/03-ytt/03-contour
#  template:
#  - ytt:
#      ignoreUnknownComments: true
#      valuesFrom:
#      - secretRef:
#          name: extensions-values
---
#apiVersion: kappctrl.k14s.io/v1alpha1
#kind: App
#metadata:
#  name: prom
#  namespace: default
#spec:
#  serviceAccountName: extensions-deploy-sa
#  deploy:
#  - kapp:
#      rawOptions:
#      - --wait-timeout=5m
#      - --kube-api-qps=20
#      - --kube-api-burst=30
#  fetch:
#  - git:
#      url: https://github.com/gorkemozlu/tanzu-gitops
#      ref: origin/master
#      subPath: apps/cluster-based/kapp/03-ytt/04-prometheus
#  template:
#  - ytt:
#      ignoreUnknownComments: true
#      valuesFrom:
#      - secretRef:
#          name: extensions-values
#---
#apiVersion: kappctrl.k14s.io/v1alpha1
#kind: App
#metadata:
#  name: grafana
#  namespace: default
#spec:
#  serviceAccountName: extensions-deploy-sa
#  deploy:
#  - kapp:
#      rawOptions:
#      - --wait-timeout=5m
#      - --kube-api-qps=20
#      - --kube-api-burst=30
#  fetch:
#  - git:
#      url: https://github.com/gorkemozlu/tanzu-gitops
#      ref: origin/master
#      subPath: apps/cluster-based/kapp/03-ytt/05-grafana
#  template:
#  - ytt:
#      ignoreUnknownComments: true
#      valuesFrom:
#      - secretRef:
#          name: extensions-values