# export DOMAIN="*.apps.h2o-4-6231.h2o.vmware.com"
# export SUBJ="/C=TR/ST=Istanbul/L=Istanbul/O=Customer, Inc./OU=IT/CN=${DOMAIN}"
# openssl genrsa -des3 -out ca.key -passout pass:1234 4096
# openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -passin pass:1234 -addext "keyUsage=critical, digitalSignature, cRLSign, keyCertSign" -addext "basicConstraints=critical,CA:true" -out ca.crt -subj "$SUBJ"
# openssl genrsa -out server-app.key 4096
# openssl req -sha512 -new \
#       -subj "$SUBJ" \
#       -key server-app.key \
#       -out server-app.csr
# cat > v3.ext <<-EOF
#   authorityKeyIdentifier=keyid,issuer
#   basicConstraints=CA:FALSE
#   keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
#   extendedKeyUsage = serverAuth
#   subjectAltName = @alt_names
#   [alt_names]
#   DNS.1=${DOMAIN}
# EOF
# openssl x509 -req -sha512 -days 3650 \
#       -passin pass:1234 \
#       -extfile v3.ext \
#       -CA ca.crt -CAkey ca.key -CAcreateserial \
#       -in server-app.csr \
#       -out server-app.crt
# openssl rsa -in ca.key -out ca-no-pass.key -passin pass:1234
# kubectl create secret tls local-ca --key ca-no-pass.key --cert ca.crt -n cert-manager
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJT...
  tls.key: LS0tLS1CRUdJT...
kind: Secret
metadata:
  creationTimestamp: null
  name: local-ca
  namespace: cert-manager
type: kubernetes.io/tls
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: local-issuer
  namespace: cert-manager
spec:
  ca:
    secretName: local-ca
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: dex
spec: {}
status: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dex-tls
  namespace: dex
spec:
  commonName: dex.apps.h2o-4-9583.h2o.vmware.com
  dnsNames:
  - dex.apps.h2o-4-9583.h2o.vmware.com
  issuerRef:
    kind: ClusterIssuer
    name: local-issuer
  secretName: dex-tls
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: dex
  namespace: dex
spec:
  virtualhost:
    fqdn: dex.apps.h2o-4-9583.h2o.vmware.com
    tls:
      secretName: dex-tls
  tcpproxy:
    services:
    - name: dex
      port: 5554
      protocol: tls
---
apiVersion: v1
kind: Secret
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
type: Opaque
stringData:
  config.yaml: |
    issuer: https://dex.apps.h2o-4-9583.h2o.vmware.com
    staticClients:
    - id: admin-octant
      redirectURIs:
      - 'https://admin-octant.apps.h2o-4-9583.h2o.vmware.com/oauth2/callback'
      name: 'admin-octant'
      secret: secretvalue
    staticPasswords:
    - email: admin@example.com
      hash: $2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W
      userID: 08a8684b-db88-4b73-90a9-3cd1661f5466
      username: admin
    enablePasswordDB: true
    oauth2:
      skipApprovalScreen: true
    storage:
      type: memory
    web:
      https: 0.0.0.0:5554
      tlsCert: /certs/tls.crt
      tlsKey: /certs/tls.key
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex-cluster
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
rules:
  - apiGroups: ["dex.coreos.com"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dex
  namespace: dex
  labels:
    helm.sh/chart: dex-0.12.1
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: dex
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 5556
      targetPort: http
      protocol: TCP
      appProtocol: http
    - name: https
      port: 5554
      targetPort: https
      protocol: TCP
      appProtocol: https
    - name: telemetry
      port: 5558
      targetPort: telemetry
      protocol: TCP
      appProtocol: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: dex
  template:
    metadata:
      annotations:
        checksum/config: 5620ea83fa0ca807c735c2af6d75c95da335d8fedd92a6f166b34e1a614d03a2
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: dex
    spec:
      serviceAccountName: dex
      securityContext:
        {}
      containers:
        - name: dex
          securityContext:
            {}
          image: "ghcr.io/dexidp/dex:v2.35.3"
          imagePullPolicy: IfNotPresent
          args:
            - dex
            - serve
            - --web-http-addr
            - 0.0.0.0:5556
            - --web-https-addr
            - 0.0.0.0:5554
            - --telemetry-addr
            - 0.0.0.0:5558
            - /etc/dex/config.yaml
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            - name: https
              containerPort: 5554
              protocol: TCP
            - name: telemetry
              containerPort: 5558
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: telemetry
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: telemetry
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/dex
              readOnly: true
            - mountPath: /certs
              name: certs
              readOnly: true
      volumes:
        - name: config
          secret:
            secretName: dex
        - name: certs
          secret:
            secretName: dex-tls
