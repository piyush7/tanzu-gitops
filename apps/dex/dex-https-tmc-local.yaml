#apiVersion: cert-manager.io/v1
#kind: ClusterIssuer
#metadata:
#  name: local-issuer
#  namespace: cert-manager
#spec:
#  ca:
#    secretName: local-ca
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: dex
spec: {}
status: {}
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dex-tls
  namespace: dex
spec:
  commonName: dex.tmc.h2o-4-12022.h2o.vmware.com
  dnsNames:
  - dex.tmc.h2o-4-12022.h2o.vmware.com
  issuerRef:
    kind: ClusterIssuer
    name: local-issuer
  secretName: dex-tls
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: dex
  namespace: dex
spec:
  ingressClassName: tmc-local
  virtualhost:
    fqdn: dex.tmc.h2o-4-12022.h2o.vmware.com
    tls:
      secretName: dex-tls
  tcpproxy:
    services:
    - name: dex
      port: 5554
      protocol: tls
---
apiVersion: v1
kind: Secret
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
type: Opaque
stringData:
  config.yaml: |
    issuer: https://dex.tmc.h2o-4-12022.h2o.vmware.com
    staticClients:
    - id: tap-auth
      redirectURIs:
      - 'https://pinniped-supervisor.tmc.h2o-4-12022.h2o.vmware.com/provider/pinniped/callback'
      name: 'tap-auth'
      secret: secretvalue
    staticPasswords:
    - email: admin@example.com
      hash: $2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W
      userID: 08a8684b-db88-4b73-90a9-3cd1661f5466
      username: admin
    enablePasswordDB: true
    oauth2:
      skipApprovalScreen: true
    storage:
      type: memory
    web:
      https: 0.0.0.0:5554
      tlsCert: /certs/tls.crt
      tlsKey: /certs/tls.key
    connectors:
    - type: ldap
      name: OpenLDAP
      id: ldap
      config:
        host: openldap.openldap.svc:389
        insecureNoSSL: true
        bindDN: cn=admin,dc=pinniped,dc=dev
        bindPW: password
        usernamePrompt: Username
        userSearch:
          baseDN: dc=pinniped,dc=dev
          filter: (objectClass=inetOrgPerson)
          username: cn
          idAttr: cn
          emailAttr: cn
          nameAttr: cn
        groupSearch:
          baseDN: dc=pinniped,dc=dev
          filter: (objectClass=groupOfUniqueNames)
          userMatchers:
          - userAttr: DN
            groupAttr: uniqueMember
          nameAttr: cn
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex-cluster
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dex
  namespace: dex
  labels:
    helm.sh/chart: dex-0.12.1
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: dex
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5556
    targetPort: http
    protocol: TCP
    appProtocol: http
  - name: https
    port: 5554
    targetPort: https
    protocol: TCP
    appProtocol: https
  - name: telemetry
    port: 5558
    targetPort: telemetry
    protocol: TCP
    appProtocol: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  namespace: dex
  labels:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: dex
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: dex
  template:
    metadata:
      annotations:
        checksum/config: 5620ea83fa0ca807c735c2af6d75c95da335d8fedd92a6f166b34e1a614d03a2
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: dex
    spec:
      serviceAccountName: dex
      securityContext: {}
      containers:
      - name: dex
        securityContext: {}
        image: projects.registry.vmware.com/tanzu_meta_pocs/tools/dex:v2.35.3
        imagePullPolicy: IfNotPresent
        args:
        - dex
        - serve
        - --web-http-addr
        - 0.0.0.0:5556
        - --web-https-addr
        - 0.0.0.0:5554
        - --telemetry-addr
        - 0.0.0.0:5558
        - /etc/dex/config.yaml
        ports:
        - name: http
          containerPort: 5556
          protocol: TCP
        - name: https
          containerPort: 5554
          protocol: TCP
        - name: telemetry
          containerPort: 5558
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz/live
            port: telemetry
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: telemetry
        resources: {}
        volumeMounts:
        - name: config
          mountPath: /etc/dex
          readOnly: true
        - mountPath: /certs
          name: certs
          readOnly: true
      volumes:
      - name: config
        secret:
          secretName: dex
      - name: certs
        secret:
          secretName: dex-tls
---
apiVersion: idp.supervisor.pinniped.dev/v1alpha1
kind: OIDCIdentityProvider
metadata:
  annotations:
    iam.amazonaws.com/permitted: main/.*
    olympus.eng.vmware.com/component.revision: 50ff630ab219f1dd1fe890acba4c81df9d4f761d
    olympus.eng.vmware.com/component.source: ""
    olympus.eng.vmware.com/component.type: kustomize/v1alpha1
  labels:
    olympus.eng.vmware.com/component: pinniped-supervisor-config
    olympus.eng.vmware.com/globalstack: local
  name: pinniped-upstream
  namespace: tmc-local
spec:
  authorizationConfig:
    additionalScopes:
      - offline_access
      - email
      - groups
    allowPasswordGrant: true
  claims:
    additionalClaimMappings:
      email: email
      name: email
      tenant_id: tenant_id
    groups: groups
    username: email
  client:
    secretName: pinniped-upstream-client-credentials
  issuer: 'https://dex.tmc.h2o-4-12022.h2o.vmware.com'
