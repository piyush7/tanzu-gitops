# kubectl get --namespace kubeapps secret kubeapps-operator-token -o go-template='{{.data.token | base64decode}}'
# export HARBOR_URL='harbor.corp.com'
# export HARBOR_USERNAME='user'
# export HARBOR_PASSWORD='password'
# wget -q https://github.com/bitnami-labs/charts-syncer/releases/download/v0.20.1/charts-syncer_0.20.1_linux_x86_64.tar.gz && tar -xvf charts-syncer_0.20.1_linux_x86_64.tar.gz && cp charts-syncer /usr/local/bin/charts-syncer
# cat > 01-bitnami-to-local.yaml <<-EOF
# source:
#   repo:
#     kind: HELM
#     url: https://charts.app-catalog.vmware.com/demo
# target:
#   intermediateBundlesPath: bitnami-local
# charts:
# - redis
# - mysql
# - rabbitmq
# - postgresql
# EOF
# charts-syncer sync --config 01-bitnami-to-local.yaml --latest-version-only
# cat > 02-bitnami-from-local.yaml <<-EOF
# source:
#   intermediateBundlesPath: bitnami-local
# target:
#   containerRegistry: $HARBOR_URL
#   containerRepository: bitnami/containers
#   containers:
#     auth:
#       username: admin
#       password: VMware1!
#   repo:
#     kind: OCI
#     url: https://$HARBOR_URL/bitnami/charts
#     auth:
#       username: $HARBOR_USERNAME
#       password: $HARBOR_PASSWORD
# EOF
# charts-syncer sync --config 02-bitnami-from-local.yaml
---
# Source: kubeapps/templates/apprepository/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-internal-apprepository-controller
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
automountServiceAccountToken: true
---
# Source: kubeapps/templates/kubeappsapis/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-internal-kubeappsapis
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kubeappsapis
automountServiceAccountToken: true
---
# Source: kubeapps/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-postgresql
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "Y1ZLRngxaEFFUQ=="
  password: "RWZLaFVPell0SQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: kubeapps/templates/frontend/oauth2-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-oauth2
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
data:
  clientID: a3ViZWFwcHMtYXV0aA==
  clientSecret: c2VjcmV0dmFsdWU=
  cookieSecret: VG5ZN0xOc05zR2xnaGJJQ1JNeU1EREVleENUa3lYYUVxMVBnTzRlTVh0Zz0=
---
# Source: kubeapps/templates/dashboard/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-internal-dashboard-config
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dashboard
data:
  vhost.conf: |-
    server {
      listen 8080;
      large_client_header_buffers 4 32k;
      server_name _;

      gzip on;
      gzip_static  on;

      location /custom_style.css {
        root /app/custom-css/;
      }

      location /custom_locale.json {
        root /app/custom-locale/;
      }

      location /custom_components.js {
        root /app/custom-components/;
      }

      location / {
        # Redirects are required to be relative otherwise the internal hostname will be exposed
        absolute_redirect off;

        # Trailing / is required in the path for the React app to be loaded correctly
        # The rewrite rule adds a trailing "/" to any path that does not contain "." neither "/".
        # i.e kubeapps => kubeapps/
        rewrite ^([^.]*[^/])$ $1/ permanent;

        # Support for ingress prefixes maintaining compatibility with the default /
        # 1 - Exactly two fragment URLs for files existing inside of the public/ dir
        # i.e /[prefix]/config.json => /config.json
        rewrite ^/[^/]+/([^/]+)$ /$1 break;

        # 2 - Any static files bundled by webpack referenced by 3 or more URL segments
        # i.e /[prefix]/static/main.js => static/main.js
        rewrite ^/[^/]+/static/(.*) /static/$1 break;

        try_files $uri /index.html;
      }
    }
  custom_style.css: |-
    
  custom_components.js: |-
    
  custom_locale.json: |-    	
    {"Kubeapps":"VMware Tanzu™ Kubeapps","login-desc-oidc":"Access to the VMware Tanzu™ Kubeapps using your My VMware account.","login-oidc":"Login via VMware Cloud Services"}
  config.json: |-
    {
      "kubeappsCluster": "default",
      "kubeappsNamespace": "kubeapps",
      "helmGlobalNamespace": "kubeapps",
      "carvelGlobalNamespace": "kapp-controller-packaging-global",
      "appVersion": "v2.7.0",
      "authProxyEnabled": false,
      "oauthLoginURI": "/oauth2/start",
      "oauthLogoutURI": "/oauth2/sign_out",
      "authProxySkipLoginPage": false,
      "featureFlags": {"apiOnly":{"enabled":false,"grpc":{"annotations":{"nginx.ingress.kubernetes.io/backend-protocol":"GRPC"}}},"operators":false,"schemaEditor":{"enabled":false}},
      "clusters": ["default"],
      "theme": "",
      "remoteComponentsUrl": "",
      "customAppViews": [],
      "skipAvailablePackageDetails": false,
      "createNamespaceLabels": {}
    }
---
# Source: kubeapps/templates/frontend/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-frontend-config
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
data:
  k8s-api-proxy.conf: |-
    # Deactivate buffering for log streaming
    proxy_buffering off;
    # Hide Www-Authenticate to prevent it triggering a basic auth prompt in
    # the browser with some clusters
    proxy_hide_header Www-Authenticate;

    # Keep the connection open with the API server even if idle (the default is 60 seconds)
    # Setting it to 1 hour which should be enough for our current use case of deploying/upgrading apps
    # If we enable other use-cases in the future we might need to bump this value
    # More info here https://github.com/vmware-tanzu/kubeapps/issues/766
    proxy_read_timeout 1h;
  vhost.conf: |-
    # Retain the default nginx handling of requests without a "Connection" header
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    # Allow websocket connections
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    server {
      listen 8080;
      large_client_header_buffers 4 32k;
      server_name _;

      location /healthz {
        access_log off;
        default_type text/plain;
        return 200 "healthy\n";
      }

      # Only proxy to k8s API endpoints if operators are enabled.

      location ~* /apis {
        rewrite ^ $request_uri; # pass the encoded url downstream as is,
        rewrite /apis/([^?]*) /$1 break;
        rewrite /apis / break;

        proxy_pass http://kubeapps-internal-kubeappsapis:8080;
      }
      location / {
        # Add the Authorization header if exists
        add_header Authorization $http_authorization;
        proxy_pass http://kubeapps-internal-dashboard:8080;
      }
    }
---
# Source: kubeapps/templates/kubeappsapis/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-internal-kubeappsapis-configmap
  namespace: "kubeapps"
data:
  plugins.conf: |-
    {
      "core": {
        "packages": {
          "v1alpha1": {
            "timeoutSeconds": 300,
            "versionsInSummary": {
              "major": 3,
              "minor": 3,
              "patch": 3
            }
          }
        }
      },
      "flux": {
        "packages": {
          "v1alpha1": {
            "defaultUpgradePolicy": "none",
            "noCrossNamespaceRefs": false
          }
        }
      },
      "helm": {
        "packages": {
          "v1alpha1": {
            "globalPackagingNamespace": ""
          }
        }
      },
      "kappController": {
        "packages": {
          "v1alpha1": {
            "defaultAllowDowngrades": false,
            "defaultPrereleasesVersionSelection": null,
            "defaultUpgradePolicy": "none",
            "globalPackagingNamespace": "kapp-controller-packaging-global"
          }
        }
      },
      "resources": {
        "packages": {
          "v1alpha1": {
            "trustedNamespaces": {
              "headerName": "",
              "headerPattern": ""
            }
          }
        }
      }
    }
---
# Source: kubeapps/templates/shared/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-clusters-config
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
data:
  clusters.conf: |-
    [
      {
        "domain": "cluster.local",
        "name": "default"
      }
    ]
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# The Kubeapps app repository controller can read and watch its own
# AppRepository resources cluster-wide. The read and write cluster-roles can
# also be bound to users in specific namespaces as required.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:kubeapps:apprepositories-read"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
      - apprepositories/finalizers
    verbs:
      - get
      - list
      - watch
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:kubeapps:apprepositories-write"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - '*'
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:kubeapps:apprepositories-refresh"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - get
      - update
---
# Source: kubeapps/templates/kubeappsapis/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:kubeapps:kubeappsapis-ns-discovery"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kubeappsapis
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "kubeapps:controller:kubeapps:apprepositories-read"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:kubeapps:apprepositories-read"
subjects:
  - kind: ServiceAccount
    name: kubeapps-internal-apprepository-controller
    namespace: kubeapps
---
# Source: kubeapps/templates/kubeappsapis/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "kubeapps:kubeapps:kubeappsapis-ns-discovery"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kubeappsapis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:kubeapps:kubeappsapis-ns-discovery"
subjects:
  - kind: ServiceAccount
    name: kubeapps-internal-kubeappsapis
    namespace: kubeapps
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-internal-apprepository-controller
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - create
      - get
      - list
      - update
      - watch
      - delete
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
      - apprepositories/finalizers
    verbs:
      - get
      - list
      - update
      - watch
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# Define role, but no binding, so users can be bound to this role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-repositories-read
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - list
      - get
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# Define role, but no binding, so users can be bound to this role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-repositories-write
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubeapps-internal-apprepository-controller
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubeapps-internal-apprepository-controller
subjects:
  - kind: ServiceAccount
    name: kubeapps-internal-apprepository-controller
    namespace: kubeapps
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "kubeapps:kubeapps:global-repos-read"
  namespace: "kubeapps"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:kubeapps:apprepositories-read"
subjects:
  - kind: Group
    name: system:authenticated
---
# Source: kubeapps/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-postgresql-hl
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/component: primary
---
# Source: kubeapps/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-postgresql
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/component: primary
---
# Source: kubeapps/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-internal-dashboard
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dashboard
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/component: dashboard
---
# Source: kubeapps/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
  annotations:
spec:
  type: LoadBalancer
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/component: frontend
---
# Source: kubeapps/templates/kubeappsapis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-internal-kubeappsapis
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kubeappsapis
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: grpc-http
      protocol: TCP
      name: grpc-http
  selector:
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/component: kubeappsapis
---
# Source: kubeapps/templates/apprepository/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-internal-apprepository-controller
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apprepository
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/instance: kubeapps
      app.kubernetes.io/component: apprepository
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-12.3.1
        app.kubernetes.io/instance: kubeapps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: apprepository
    spec:      
      serviceAccountName: kubeapps-internal-apprepository-controller
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/instance: kubeapps
                    app.kubernetes.io/component: apprepository
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: controller
          image: projects.registry.vmware.com/tanzu_meta_pocs/bitnami/kubeapps/kubeapps-apprepository-controller:2.7.0-scratch-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /apprepository-controller
          args:
            - --user-agent-comment=kubeapps/2.7.0
            - --repo-sync-image=$(REPO_SYNC_IMAGE)
            - --repo-sync-cmd=/asset-syncer
            - --namespace=kubeapps
            - --global-repos-namespace=kubeapps
            - --database-secret-name=kubeapps-postgresql
            - --database-secret-key=postgres-password
            - --database-url=kubeapps-postgresql:5432
            - --database-user=postgres
            - --database-name=assets
            - --repos-per-namespace=true
          env:
            - name: REPO_SYNC_IMAGE
              value: projects.registry.vmware.com/tanzu_meta_pocs/bitnami/kubeapps/kubeapps-asset-syncer:2.7.0-scratch-r0
          envFrom:
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
---
# Source: kubeapps/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-internal-dashboard
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dashboard
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/instance: kubeapps
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      annotations:
        checksum/config: 561aabf35f5e541e5a87273b38afca90b717e8ef7bf4c4d939209e40186600d1
      labels:
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-12.3.1
        app.kubernetes.io/instance: kubeapps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: dashboard
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/instance: kubeapps
                    app.kubernetes.io/component: dashboard
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: dashboard
          image: projects.registry.vmware.com/tanzu_meta_pocs/bitnami/kubeapps/kubeapps-dashboard:2.7.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          startupProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
            - name: config
              mountPath: /app/config.json
              subPath: config.json
            - mountPath: /app/custom-css
              name: custom-css
            - mountPath: /app/custom-locale
              name: custom-locale
            - mountPath: /app/custom-components
              name: custom-components
      volumes:
        - name: vhost
          configMap:
            name: kubeapps-internal-dashboard-config
            items:
              - key: vhost.conf
                path: vhost.conf
        - name: config
          configMap:
            name: kubeapps-internal-dashboard-config
            items:
              - key: config.json
                path: config.json
        - name: custom-css
          configMap:
            name: kubeapps-internal-dashboard-config
            items:
              - key: custom_style.css
                path: custom_style.css
        - name: custom-locale
          configMap:
            name: kubeapps-internal-dashboard-config
            items:
              - key: custom_locale.json
                path: custom_locale.json
        - name: custom-components
          configMap:
            name: kubeapps-internal-dashboard-config
            items:
              - key: custom_components.js
                path: custom_components.js
---
############
# Source: kubeapps/templates/frontend/deployment.yaml# Source: kubeapps/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/instance: kubeapps
      app.kubernetes.io/component: frontend
  template:
    metadata:
      annotations:
        checksum/config: 973842952338b89e82d84d1d85f9064febaf6605197503d3b5031441d0693f38
      labels:
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-12.3.1
        app.kubernetes.io/instance: kubeapps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: frontend
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/instance: kubeapps
                    app.kubernetes.io/component: frontend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: nginx
          image: projects.registry.vmware.com/tanzu_meta_pocs/bitnami/kubeapps/nginx:1.23.4-debian-11-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
      volumes:
        - name: vhost
          configMap:
            name: kubeapps-frontend-config
---
# Source: kubeapps/templates/kubeappsapis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-internal-kubeappsapis
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/component: kubeappsapis
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/instance: kubeapps
      app.kubernetes.io/component: kubeappsapis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-12.3.1
        app.kubernetes.io/instance: kubeapps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kubeappsapis
    spec:      
      serviceAccountName: kubeapps-internal-kubeappsapis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/instance: kubeapps
                    app.kubernetes.io/component: kubeappsapis
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      # Increase termination timeout to let remaining operations to finish before ending the pods
      # This is because new releases/upgrades/deletions are synchronous operations
      terminationGracePeriodSeconds: 300
      containers:
        - name: kubeappsapis
          image: projects.registry.vmware.com/tanzu_meta_pocs/bitnami/kubeapps/kubeapps-apis:2.7.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /kubeapps-apis
          args:
            - --plugin-dir
            - /plugins/helm-packages
            - --plugin-dir
            - /plugins/resources
            - --clusters-config-path=/config/clusters.conf
            - --plugin-config-path=/config/kubeapps-apis/plugins.conf
            - --global-repos-namespace=kubeapps
            - --kube-api-qps=50.0
            - --kube-api-burst=100
          env:
            - name: GOGC
              value: "50" # default is 100. 50 means increasing x2 the frequency of GC
            - name: PORT
              value: "50051"
            # TODO(agamez): pass this configuration using a separated config file
            # These env vars are currently (and temporarily) required by the 'helm' plugin
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ASSET_SYNCER_DB_URL
              value: kubeapps-postgresql-hl:5432
            - name: ASSET_SYNCER_DB_NAME
              value: "assets"
            - name: ASSET_SYNCER_DB_USERNAME
              value: "postgres"
            - name: ASSET_SYNCER_DB_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: kubeapps-postgresql
          envFrom:
          ports:
            - name: grpc-http
              containerPort: 50051
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /core/plugins/v1alpha1/configured-plugins
              port: grpc-http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /core/plugins/v1alpha1/configured-plugins
              port: grpc-http
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
            - name: clusters-config
              mountPath: /config
            - name: ca-certs
              mountPath: /etc/additional-clusters-cafiles
            - name: plugins-config
              mountPath: /config/kubeapps-apis
      volumes:
        - name: clusters-config
          configMap:
            name: kubeapps-clusters-config
        - name: ca-certs
          emptyDir: {}
        - name: plugins-config
          configMap:
            name: kubeapps-internal-kubeappsapis-configmap
---
# Source: kubeapps/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kubeapps-postgresql
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.8
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: kubeapps-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: kubeapps
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: kubeapps-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.2.8
        app.kubernetes.io/instance: kubeapps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: kubeapps
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: projects.registry.vmware.com/tanzu_meta_pocs/bitnami/kubeapps/postgresql:15.2.0-debian-11-r21
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kubeapps-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: "assets"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=assets" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=assets" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: apprepositories.kubeapps.com
spec:
  group: kubeapps.com
  scope: Namespaced
  names:
    kind: AppRepository
    plural: apprepositories
    shortNames:
      - apprepos
  versions:
    - name: v1alpha1
      storage: true
      served: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - spec
          properties:
            spec:
              type: object
              required:
                - type
                - url
              properties:
                type:
                  type: string
                  enum: ["helm", "oci"]
                url:
                  type: string
                description:
                  type: string
                auth:
                  type: object
                  properties:
                    header:
                      type: object
                      required:
                        - secretKeyRef
                      properties:
                        secretKeyRef:
                          type: object
                          required:
                            - key
                            - name
                          properties:
                            key:
                              type: string
                            name:
                              type: string
                    customCA:
                      type: object
                      required:
                        - secretKeyRef
                      properties:
                        secretKeyRef:
                          type: object
                          required:
                            - key
                            - name
                          properties:
                            key:
                              type: string
                            name:
                              type: string
                dockerRegistrySecrets:
                  type: array
                  items:
                    type: string
                tlsInsecureSkipVerify:
                  type: boolean
                passCredentials:
                  type: boolean
                interval:
                  type: string
                filterRule:
                  type: object
                  properties:
                    jq:
                      type: string
                    variables:
                      type: object
                      additionalProperties:
                        type: string
                ociRepositories:
                  type: array
                  items:
                    type: string
                resyncRequests:
                  type: integer
                syncJobPodTemplate:
                  type: object
                  properties:
                    metadata:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    spec:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              properties:
                status:
                  type: string
      additionalPrinterColumns:
        - name: Type
          type: string
          description: The type of this repository.
          jsonPath: .spec.type
        - name: URL
          type: string
          description: The URL of this repository.
          jsonPath: .spec.url
---
# Source: kubeapps/templates/apprepository/apprepositories.yaml
apiVersion: kubeapps.com/v1alpha1
kind: AppRepository
metadata:
  name: app-catalog
  namespace: "kubeapps"
  labels:
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-12.3.1
    app.kubernetes.io/instance: kubeapps
    app.kubernetes.io/managed-by: Helm
spec:
  type: helm
  url: https://charts.app-catalog.vmware.com/demo
  syncJobPodTemplate:
    spec:
      securityContext:
        runAsUser: 1001
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kubeapps-tls
  namespace: kubeapps
spec:
  commonName: kubeapps.tap.h2o-4-10940.h2o.vmware.com
  dnsNames:
  - kubeapps.tap.h2o-4-10940.h2o.vmware.com
  issuerRef:
    kind: ClusterIssuer
    name: local-issuer
  secretName: kubeapps-tls
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: kubeapps-grpc
  namespace: kubeapps
spec:
  virtualhost:
    fqdn: kubeapps.tap.h2o-4-10940.h2o.vmware.com
    tls:
      secretName: kubeapps-tls
  routes:
    - conditions:
      - prefix: /apis/
      pathRewritePolicy:
        replacePrefix:
        - replacement: /
      services:
        - name: kubeapps-internal-kubeappsapis
          port: 8080
          protocol: h2c
    - services:
      - name: kubeapps
        port: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-operator
  namespace: kubeapps
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: kubeapps-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubeapps-operator
  namespace: kubeapps
---
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-operator-token
  namespace: kubeapps
  annotations:
    kubernetes.io/service-account.name: kubeapps-operator
type: kubernetes.io/service-account-token
---
apiVersion: v1
data:
  authorizationHeader: QmFzaWMgZEdGdWVuVTZWazEzWVhKbE1TRT0=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUYrekNDQStPZ0F3SUJBZ0lVSS9ma0dWL0lzOSt5dm1yNXQ5TUpKMlpNWlJRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZUXhDekFKQmdOVkJBWVRBbFJTTVJFd0R3WURWUVFJREFoSmMzUmhibUoxYkRFUk1BOEdBMVVFQnd3SQpTWE4wWVc1aWRXd3hGekFWQmdOVkJBb01Ea04xYzNSdmJXVnlMQ0JKYm1NdU1Rc3dDUVlEVlFRTERBSkpWREVwCk1DY0dBMVVFQXd3Z0tpNTBZWEF1YURKdkxUUXRNVEE1TkRBdWFESnZMblp0ZDJGeVpTNWpiMjB3SGhjTk1qTXcKTkRJNU1USXlORFU1V2hjTk1qWXdNakUyTVRJeU5EVTVXakNCaERFTE1Ba0dBMVVFQmhNQ1ZGSXhFVEFQQmdOVgpCQWdNQ0VsemRHRnVZblZzTVJFd0R3WURWUVFIREFoSmMzUmhibUoxYkRFWE1CVUdBMVVFQ2d3T1EzVnpkRzl0ClpYSXNJRWx1WXk0eEN6QUpCZ05WQkFzTUFrbFVNU2t3SndZRFZRUUREQ0FxTG5SaGNDNW9NbTh0TkMweE1EazAKTUM1b01tOHVkbTEzWVhKbExtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQgpBS1hSUTJMMU5rNFVTSVNGb3RhZjZYVnEyaWJwUG13KzBzZGhiZDVJeDJuUkRISlZLMGpYUmlEa0R3Z3dBMmNOCkxqbEhoaHJDV1lPa0FXOEVIOVozVFBxUW9uOVAvK0Z6MFZVQU10MndNdml5TXB0UXlseklRQUEwYUlpQ01DeVEKZUJKUHRuUHpZKzJKOWh3UUdydk41Y0daM0gvaGdCdXppL3ZJWFpQMnoyRFpzUDMyaGtKbXJ0blhNaHlYTWpldwpueGpYNmx3THVFOWRYTVloWGdWUEVNZ2hOck9ENWNEbmJ2L2pKRE9ydWVUWjRWMFNnZk01eTlZdUJrb29Xc2MvCmFIM2lHNmhMWGNxVmxZcW1uR0l4L0tZT2I1bUFrL3NjVlRwZitvTlpiYkV6NDhITWx1Vy92NXh1bGs2dUlWanYKMjQrUmpOMXNISDMvaFo5dVFySGhrLzhSc0Z4WUxaNFY2QzFhbDFTaHFLVGp1YTIzYk9rdHh4NTFmMllqanNjVQo0VW13YkMwc1RuUEkxMWRmUFhibnMwald5OG9IRnJCOXkrdDdKaVU1aUU1NGVvSzlCRUhrNW9lVTQva3lONTg1CkZWYSt6SktsOHJWZXFqei9za0ZJNlZQcmNNU3FJZVBxOUdmSGdhSk8xdW0xd0ljVDJyajVMNGV3clg2ZThIRisKeWc1b0N0TXJubkNLWW51SjhCZGFhMGZGV3BBVmhBS01uS0JqZUF5YzNSTENNSURiL0UrckxQQlpuNjdVemdXWQpxNC92UkJnejEzV3lHM3UxOTVFTERoUktBKzNjOUVMeUROZEZHMzFleWZleE1NNDBkWUpCSzE2aFJVTHRNMGVNCjJYRDhpWDdwVzVTTElmcFhSYjZDMUhsemZ2ODBsWWJXUTA5RDVLblJaUFFGQWdNQkFBR2pZekJoTUIwR0ExVWQKRGdRV0JCUUFVemRFQUQydGNEWE5KQmVqZDZLOTFyRHFEakFmQmdOVkhTTUVHREFXZ0JRQVV6ZEVBRDJ0Y0RYTgpKQmVqZDZLOTFyRHFEakFPQmdOVkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBZ0VBYTJzcTNSV0dJcUx5cTZpYTZPTGNtd0xLOVZhKzNhbVMrcWh6b2JURDRKamoKY0x3eXQwaEcwK0prT0hSWW9EVDFmb3Z3ZFpxMjZyYUkzeituU0xqVHBVZ1lJczBGcVJJaCs5M1dvUWtJWDVGTwpoNW1NTjNoK2hMMFFKR0FvTlRFOUtUYTQ3dXl3TDVvbzRFaGdWbFNKZWh2b1hpSC94RUxsYVV0bWRtYXA1cmRkCjRNS3ZDRllYRlVVaW1DOURtV0pQeDFocW5wQlgySWRzbGZFejVvZ0NRcldzRENhTm9scXUvdUNJOFo2Rnh3ZWEKTlpOSlNGTUhPZ1JnL0JlS1Vtckl5R2ljNTVvankyeGQ2L3hTNnVrQlRDdnI2b1hvdmIwZTVibXJvTEhpYWtSVApVYjhhQUI4SEJleWhxb1ZlN2UycFYrYkRIN1lNVzhBc25tK0ZnV0lGMngzd21GVVFtSXZoaUtZeXFuY3JSYmErCjhVajl3WlU3Zmkxb0p6dGRIYXFMaG5jTDlScmVJZnFENHFyZ3haMHRLd21jN1ZsSjVqWmttODAyZGQrYkQ0cWcKUU4yYnBYWnRjRTlhSnltUU1JZDdtR3ljRjExMS9ZNWczY09HaHduSWYrbTN0OTM5NUM2akcySFdoVnpJMFBzRwpGR1JDRVFVc2RJQzJPbGpzZmNqUmxJbWxtMDBpM1c3aGE4YnJVMWhnRWJlajBneTByc3dqT1JNbUlvWWdYWjVpCmRKQTRqVTFaQlR5SUpsK2VneEZxS1Q4L1lSTHJjRWdnbzNFUVB2MnU2NnlhVitVMXQ4Zm1CTEVTNmR3eUdKWlcKcmFGOE01ME93N2JhMlZYSEJVQ1I5UVI1bGNQVk9qRjdOM2kxYkdoalZiV0tYRHJZOWY4TTRFaFNMZ01VeTc4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
kind: Secret
metadata:
  annotations:
    kubeapps.dev/managed-by: plugin:helm
  name: apprepo-oci
  namespace: kubeapps
type: Opaque
---
apiVersion: kubeapps.com/v1alpha1
kind: AppRepository
metadata:
  name: apprepo-oci
  namespace: kubeapps
spec:
  auth:
    customCA:
      secretKeyRef:
        key: ca.crt
        name: apprepo-oci
    header:
      secretKeyRef:
        key: authorizationHeader
        name: apprepo-oci
  filterRule:
    jq: ""
  interval: 1m
  ociRepositories:
  - redis
  resyncRequests: 0
  syncJobPodTemplate:
    metadata:
      creationTimestamp: null
    spec:
      containers: null
      securityContext: {}
  tlsInsecureSkipVerify: true
  type: oci
  url: https://harbor.tap.h2o-4-10940.h2o.vmware.com/bitnami/charts