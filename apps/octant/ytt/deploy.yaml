#@ load("@ytt:data", "data")
---
#@ namespace = data.values.namespace.name
#@ for i in range(len(namespace)):
---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: #@ namespace[i]
spec: {}
status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: octant-dev
  namespace: #@ namespace[i]
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dev-ns-full-access
  namespace: #@ namespace[i]
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: octant-role
  namespace: #@ namespace[i]
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dev-ns-full-access
subjects:
- kind: ServiceAccount
  name: octant-dev
  namespace: #@ namespace[i]
---
apiVersion: v1
kind: Service
metadata:
  name: octant-dashboard
  namespace: #@ namespace[i]
  labels:
    app.kubernetes.io/name: octant
    app.kubernetes.io/instance: octant-dashboard
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: octant
    app.kubernetes.io/instance: octant-dashboard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: octant-dashboard
  namespace: #@ namespace[i]
  labels:
    app.kubernetes.io/name: octant
    app.kubernetes.io/instance: octant-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: octant
      app.kubernetes.io/instance: octant-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: octant
        app.kubernetes.io/instance: octant-dashboard
    spec:
      serviceAccountName: octant-dev
      securityContext:
        fsGroup: 2000
      initContainers:
      containers:
        - name: octant
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "harbor.mgt.mytanzu.org/tools/octant-dashboard:v0.25.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: OCTANT_HTTP_PORT
              value: "8000"
            - name: OCTANT_PLUGINS_DIR
              value: "/home/octant/.config/octant/plugins/"
            - name: OCTANT_PLUGINS_LIST
              value: ""
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: tmp-mount
              mountPath: /tmp
            - name: plugins-mount
              mountPath: "/home/octant/.config/octant/plugins/"
              #readOnly: true
          resources:
            {}
      volumes:
        - name: tmp-mount
          emptyDir: {}
        - name: plugins-mount
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: octant-auth-proxy
  name: octant-auth-proxy
  namespace: #@ namespace[i]
spec:
  replicas: 1
  selector:
    matchLabels:
      name: octant-auth-proxy
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: octant-auth-proxy
    spec:
      containers:
      - args:
        - --provider=oidc
        - #@ "--client-id=" + namespace[i] + "-octant"
        - --client-secret=secretvalue
        - #@ "--oidc-issuer-url=https://dex." + data.values.ingress
        - --cookie-secret=bm90LWdvb2Qtc2VjcmV0Cg==
        - --cookie-refresh=2m
        - --upstream=http://octant-dashboard:8000/
        - --http-address=0.0.0.0:3000
        - --email-domain="*"
        - --pass-basic-auth=false
        - --pass-access-token=true
        - --pass-authorization-header=true
        - --proxy-prefix=/oauth2
        image: harbor.mgt.mytanzu.org/tools/oauth2-proxy:7.2.1
        imagePullPolicy: IfNotPresent
        name: octant-auth-proxy
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: octant-auth-proxy
  name: octant-auth-proxy
  namespace: #@ namespace[i]
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    name: octant-auth-proxy
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: octant-oauth-tls
  namespace: #@ namespace[i]
spec:
  commonName: #@ namespace[i] + "-octant." + data.values.ingress
  dnsNames:
  - #@ namespace[i] + "-octant." + data.values.ingress
  duration: 2160h0m0s
  issuerRef:
    kind: ClusterIssuer
    name: #@ data.values.cert.clusterissuer.name
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  subject:
    organizations:
    - vmware
  renewBefore: 360h0m0s
  secretName: octant-oauth-tls
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: octant-oauth
  namespace: #@ namespace[i]
spec:
  routes:
  - conditions:
    - prefix: "/"
    enableWebsockets: true
    services:
    - name: octant-auth-proxy
      port: 3000
  virtualhost:
    fqdn: #@ namespace[i] + "-octant." + data.values.ingress
    tls:
      secretName: octant-oauth-tls

#@ end
---
